var df = spark.read.format("csv").load("s3://airline-delay-jj/DelayedFlights-updated.csv")
df.show()

val header = df.first()

val dfWithoutHeader = df.filter(row => row != header)
dfWithoutHeader.show()

dfWithoutHeader.createOrReplaceTempView("delay_flights")

var result = spark.sql("SELECT _c1 as Year, avg((_c25/_c15)*100) as Year_wise_career_delay from delay_flights GROUP BY _c1").show()
var result = spark.sql("SELECT _c1 as Year, avg((_c27/_c15)*100) as Year_wise_NAS_delay from delay_flights GROUP BY _c1").show()
var result = spark.sql("SELECT _c1 as Year, avg((_c26/_c15)*100) as Year_wise_weather_delay from delay_flights GROUP BY _c1").show()
var result = spark.sql("SELECT _c1 as Year, avg((_c29/_c15)*100) as Year_wise_late_aircraft_delay from delay_flights GROUP BY _c1").show()
var result = spark.sql("SELECT _c1 as Year, avg((_c28/_c15)*100) as Year_wise_security_delay from delay_flights GROUP BY _c1").show()